<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playfield</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>owner = 0;                      // player who selected this tile
hp = 5;                         // starting hitpoints; 5 because it'S one more than hits possible
active = false;                 // aktive allowes to change image direction
owned = false;                  // state of already being selected by a player
killbill = ds_list_create();    // list of all neighboring tiles aiming at this one
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_endRound</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if active == true {
   image_index = 1;
   image_angle = scr_followCursor();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (active == true) {
    // Image shall aim in the selcted direction
    active = false;
    scr_raiseWeapon(image_angle);
    // If target is not in the current player's team add to killbill and check for victory
    if (target.owner != owner) {
        ds_list_add(target.killbill, owner);
        scr_killCheck(target);
    }
    // end turn/ switch player    
    scr_switchPlayer();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* As a player I can select a free tile, mark it as mine activate it for aim direction select */

// check if tile is free
if (owned == false) {
    if (player == 1) {
        sprite_index = spr_player1;
        owner = 1;
    }
    else if (player == 2) {
        sprite_index = spr_player2;
            owner = 2;
    }
    owned = true;
    image_index = 0;    // sprite's first image displaying the player'S color but no aiming direction
    
    // when other tiles already aim at this one ignore all of those owned by the same player
    if (!ds_list_empty(killbill)) {
        for (i = 0; i &lt; ds_list_size(killbill); i++) {
            if (ds_list_find_value(killbill,i) == owner) {ds_list_delete(killbill, i);}
        }
    }
    // set hp to the actual amound and do a healtcheck with the updated list
    hp = 3;
    scr_killCheck(self);
    
    //image_index = 1;
    // game is still on so activate the tile for direction selection
    active = true;
}

/* As a player I can select a tile already owned by my instead a new one and correct its aiming direction */
else if (owner == player) {
    // when target's owner is diefferent to current player go through the target's list and delete any one entry of the current player, reducing damamge
    if (target.owner != owner &amp;&amp; !ds_list_empty(target.killbill)) {
        for (i = 0; i &lt; ds_list_size(target.killbill); i++) {
            if (ds_list_find_value(target.killbill,i) == owner) {
                ds_list_delete(target.killbill, i);
                break;
            }
        }
    }
    //image_index = 1;   
    // enable tile for direction selection
    active = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
